#!BPY
# -*- python-indent: 4; coding: iso-8859-1; mode: python -*-
# Copyright (C) 2008 Cedric Pinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#  Cedric Pinson <cedric.pinson@plopbyte.net>
#

"""
Name: 'osgexporter (.osg)'
Blender: 248
Group: 'Export'
Tip: 'Export armature/bone/action data to osg formats.'
"""

from twisted.trial import unittest, runner, reporter
from twisted.internet import reactor, defer
from twisted.python import failure
import twisted
import math

import sys
sys.path.insert(0, "@PROJECT_SOURCE_DIR@/blenderExporter/")

import Blender
import bpy
import osg
from osg.osgobject import *
from osg.osgdata import *


def close(a, b, threshold):
    for i in range(0,len(a)):
        if math.fabs(a[i] - b[i]) > threshold:
            return False
    return True

def findRigGeometry(name, item):

    if item.className() == "RigGeometry" and item.name == name:
        return item
    print item.className(), " ", item.name
    if hasattr(item, "children"):
        for sitem in item.children:
            res = findRigGeometry(name, sitem)
            if res is not None:
                return res
    if hasattr(item, "drawables"):
        for sitem in item.drawables:
            res = findRigGeometry(name, sitem)
            if res is not None:
                return res

    return None

class Exporter(unittest.TestCase):
    # ------------------------------------------------------
    def setUp(self):
        osg.osgobject.initReferenceCount()

    def tearDown(self):
        pass

    def testConfig(self):
        conf = osg.osgconf.Config()
        self.assertEquals("", conf.filename)
        self.assertEquals("", conf.author)
        self.assertEquals(2, conf.indent)
        self.assertEquals(5, conf.float_precision)
        self.assertEquals(0, conf.format_num)
        self.assertEquals(25, conf.anim_fps)
        self.assertEquals(None, conf.log_file)
        self.assertEquals(True, conf.log)
        self.assertEquals("ALL", conf.selected)
        self.assertEquals(False, conf.relative_path)
        self.assertEquals("FORCE", conf.anim_bake)
        self.assertEquals(True, conf.export_anim)
        self.assertEquals("./", conf.fullpath)
        self.assertEquals([], conf.exclude_objects)


    def testFindArmature(self):
        armature = osg.osgdata.findArmatureObjectForAction(bpy.data.actions["Idle_Main.001"])
        self.assertEquals(bpy.data.objects["Rig"], armature )

    def testUpdateCallback(self):
        node = MatrixTransform()
        node.setName("test")
        cb = UpdateTransform()
        cb.setName("woot")
        node.update_callbacks.append(cb)
        result = str(node)
        text = """MatrixTransform {
  UniqueID uniqid_MatrixTransform_0
  name "test"
  cullingActive TRUE
  UpdateCallbacks {
    osgAnimation::UpdateTransform {
      UniqueID uniqid_UpdateTransform_1
      name "woot"
    }
  }
  Matrix {
    1.00000 0.00000 0.00000 0.00000
    0.00000 1.00000 0.00000 0.00000
    0.00000 0.00000 1.00000 0.00000
    0.00000 0.00000 0.00000 1.00000
  }
  num_children 0
}
"""
        self.assertEquals(text, result)

    def testBone(self):
        node = Bone()
        node.setName("test")
        cb = UpdateBone()
        cb.setName("overwoot")
        node.update_callbacks.append(cb)
        result = str(node)
        text = """osgAnimation::Bone {
  UniqueID uniqid_Bone_0
  DataVariance DYNAMIC
  name "test"
  cullingActive TRUE
  UpdateCallbacks {
    osgAnimation::UpdateBone {
      UniqueID uniqid_UpdateBone_1
      name "overwoot"
    }
  }
  bindQuaternion 0.00000 0.00000 0.00000 1.00000
  bindPosition 0.00000 0.00000 0.00000
  bindScale 1.00000 1.00000 1.00000
  num_children 0
}
"""
        self.assertEquals(text, result)


    def testSkeleton(self):
        node = Skeleton("test", Matrix().resize4x4().identity())
        node.setName("test")
        cb = node.update_callbacks[0]
        cb.setName("overwoot")
        result = str(node)
        text = """osgAnimation::Skeleton {
  UniqueID uniqid_Skeleton_0
  DataVariance DYNAMIC
  name "test"
  cullingActive TRUE
  UpdateCallbacks {
    osgAnimation::UpdateSkeleton {
      UniqueID uniqid_UpdateSkeleton_1
      name "overwoot"
    }
  }
  bindQuaternion 0.00000 0.00000 0.00000 1.00000
  bindPosition 0.00000 0.00000 0.00000
  bindScale 1.00000 1.00000 1.00000
  num_children 0
}
"""
        self.assertEquals(text, result)

    def testRigGeometry(self):
        node = RigGeometry()
        node.setName("test")
        node.groups['test'] = VertexGroup()
        result = str(node)
        text = """osgAnimation::RigGeometry {
  UniqueID uniqid_RigGeometry_0
  DataVariance DYNAMIC
  name "test"
  num_influences 1
  osgAnimation::VertexInfluence "None" 0 {
  }
}
"""
        self.assertEquals(text, result)

    def testArmature(self):
        armature = bpy.data.scenes["Armature"]
        bpy.data.scenes.active = armature
        exporter = Export()
        exporter.process()
        exporter.write()

    def testArmatureSimple(self):
        initReferenceCount()
        sc = bpy.data.scenes["ArmatureSimple"]
        bpy.data.scenes.active = sc
        exporter = Export()
        exporter.config.anim_bake = "force"
        exporter.process()
        self.assertEquals(1, len(exporter.animations))
        self.assertEquals(True, len(exporter.animations.values()[0].channels[0].keys) > 2)
        self.assertEquals(1, len(exporter.root.update_callbacks))
        rig = findRigGeometry("Cube", exporter.root)
        #print rig.groups['Bone.001'][0]
        v0 = rig.groups['Bone.001'].vertexes[0][0]
        v1 = rig.groups['Bone.001'].vertexes[1][0]
        print v0, " ", v1
        self.assertEquals(True, v0 != v1)
        text = exporter.root.update_callbacks[0].ascii()
        result = '$osgAnimation::BasicAnimationManager {\n$#UniqueID uniqid_BasicAnimationManager_38\n$#num_animations 1\n  osgAnimation::Animation {\n    UniqueID uniqid_Animation_11\n    name "Action"\n    num_channels 9\n    Channel {\n      name "quaternion"\n      target "Bone.001"\n      Keyframes "Quat" 20 {\n        key 0.00000 0.00000 0.00000 0.00000 1.00000\n        key 0.04000 0.01962 -0.00000 -0.00000 0.99981\n        key 0.08000 0.08011 -0.00000 -0.00000 0.99679\n        key 0.12000 0.18125 -0.00000 -0.00000 0.98344\n        key 0.16000 0.31294 0.00000 0.00000 0.94977\n        key 0.20000 0.45100 0.00000 -0.00000 0.89252\n        key 0.24000 0.56771 -0.00000 0.00000 0.82323\n        key 0.28000 0.64843 0.00000 -0.00000 0.76128\n        key 0.32000 0.69316 0.00000 -0.00000 0.72078\n        key 0.36000 0.70711 -0.00000 0.00000 0.70711\n        key 0.40000 0.70711 -0.00000 0.00000 0.70711\n        key 0.44000 0.70711 -0.00000 0.00000 0.70711\n        key 0.48000 0.70711 -0.00000 0.00000 0.70711\n        key 0.52000 0.70711 -0.00000 0.00000 0.70711\n        key 0.56000 0.70711 -0.00000 0.00000 0.70711\n        key 0.60000 0.70711 -0.00000 0.00000 0.70711\n        key 0.64000 0.70711 -0.00000 0.00000 0.70711\n        key 0.68000 0.70711 -0.00000 0.00000 0.70711\n        key 0.72000 0.70711 -0.00000 0.00000 0.70711\n        key 0.76000 0.70711 -0.00000 0.00000 0.70711\n      }\n    }\n    Channel {\n      name "scale"\n      target "Bone.001"\n      Keyframes "Vec3" 20 {\n        key 0.00000 1.00000 1.00000 0.00000\n        key 0.04000 1.00000 1.00000 0.00000\n        key 0.08000 1.00000 1.00000 0.00000\n        key 0.12000 1.00000 1.00000 0.00000\n        key 0.16000 1.00000 1.00000 0.00000\n        key 0.20000 1.00000 1.00000 0.00000\n        key 0.24000 1.00000 1.00000 0.00000\n        key 0.28000 1.00000 1.00000 0.00000\n        key 0.32000 1.00000 1.00000 0.00000\n        key 0.36000 1.00000 1.00000 0.00000\n        key 0.40000 1.00000 1.00000 0.00000\n        key 0.44000 1.00000 1.00000 0.00000\n        key 0.48000 1.00000 1.00000 0.00000\n        key 0.52000 1.00000 1.00000 0.00000\n        key 0.56000 1.00000 1.00000 0.00000\n        key 0.60000 1.00000 1.00000 0.00000\n        key 0.64000 1.00000 1.00000 0.00000\n        key 0.68000 1.00000 1.00000 0.00000\n        key 0.72000 1.00000 1.00000 0.00000\n        key 0.76000 1.00000 1.00000 0.00000\n      }\n    }\n    Channel {\n      name "position"\n      target "Bone.001"\n      Keyframes "Vec3" 20 {\n        key 0.00000 0.00000 0.00000 0.00000\n        key 0.04000 0.00000 0.00000 0.00000\n        key 0.08000 0.00000 0.00000 0.00000\n        key 0.12000 0.00000 0.00000 0.00000\n        key 0.16000 0.00000 0.00000 0.00000\n        key 0.20000 0.00000 0.00000 0.00000\n        key 0.24000 0.00000 0.00000 0.00000\n        key 0.28000 0.00000 0.00000 0.00000\n        key 0.32000 0.00000 0.00000 0.00000\n        key 0.36000 0.00000 0.00000 0.00000\n        key 0.40000 0.00000 0.00000 0.00000\n        key 0.44000 0.00000 0.00000 0.00000\n        key 0.48000 0.00000 0.00000 0.00000\n        key 0.52000 0.00000 0.00000 0.00000\n        key 0.56000 0.00000 0.00000 0.00000\n        key 0.60000 0.00000 0.00000 0.00000\n        key 0.64000 0.00000 0.00000 0.00000\n        key 0.68000 0.00000 0.00000 0.00000\n        key 0.72000 0.00000 0.00000 0.00000\n        key 0.76000 0.00000 0.00000 0.00000\n      }\n    }\n    Channel {\n      name "quaternion"\n      target "Bone.002"\n      Keyframes "Quat" 20 {\n        key 0.00000 0.00000 0.00000 0.00000 1.00000\n        key 0.04000 0.00000 0.00000 0.00000 1.00000\n        key 0.08000 -0.00000 0.00000 -0.00000 1.00000\n        key 0.12000 0.00000 0.00000 0.00000 1.00000\n        key 0.16000 -0.00000 0.00000 0.00000 1.00000\n        key 0.20000 0.00000 0.00000 0.00000 1.00000\n        key 0.24000 0.00000 0.00000 0.00000 1.00000\n        key 0.28000 0.00000 -0.00000 -0.00000 1.00000\n        key 0.32000 0.00000 0.00000 -0.00000 1.00000\n        key 0.36000 -0.00000 0.00000 -0.00000 1.00000\n        key 0.40000 0.01579 0.00000 -0.00000 0.99988\n        key 0.44000 0.06441 0.00000 -0.00000 0.99792\n        key 0.48000 0.14647 0.00000 -0.00000 0.98922\n        key 0.52000 0.25720 0.00000 -0.00000 0.96636\n        key 0.56000 0.38238 0.00000 -0.00000 0.92400\n        key 0.60000 0.50096 0.00000 -0.00000 0.86547\n        key 0.64000 0.59562 0.00000 -0.00000 0.80327\n        key 0.68000 0.65997 0.00000 -0.00000 0.75129\n        key 0.72000 0.69583 0.00000 0.00000 0.71821\n        key 0.76000 0.70711 0.00000 0.00000 0.70711\n      }\n    }\n    Channel {\n      name "scale"\n      target "Bone.002"\n      Keyframes "Vec3" 20 {\n        key 0.00000 1.00000 1.00000 0.00000\n        key 0.04000 1.00000 1.00000 0.00000\n        key 0.08000 1.00000 1.00000 0.00000\n        key 0.12000 1.00000 1.00000 0.00000\n        key 0.16000 1.00000 1.00000 0.00000\n        key 0.20000 1.00000 1.00000 0.00000\n        key 0.24000 1.00000 1.00000 0.00000\n        key 0.28000 1.00000 1.00000 0.00000\n        key 0.32000 1.00000 1.00000 0.00000\n        key 0.36000 1.00000 1.00000 0.00000\n        key 0.40000 1.00000 1.00000 0.00000\n        key 0.44000 1.00000 1.00000 0.00000\n        key 0.48000 1.00000 1.00000 0.00000\n        key 0.52000 1.00000 1.00000 0.00000\n        key 0.56000 1.00000 1.00000 0.00000\n        key 0.60000 1.00000 1.00000 0.00000\n        key 0.64000 1.00000 1.00000 0.00000\n        key 0.68000 1.00000 1.00000 0.00000\n        key 0.72000 1.00000 1.00000 0.00000\n        key 0.76000 1.00000 1.00000 0.00000\n      }\n    }\n    Channel {\n      name "position"\n      target "Bone.002"\n      Keyframes "Vec3" 20 {\n        key 0.00000 0.00000 0.00000 -0.00000\n        key 0.04000 0.00000 0.00000 -0.00000\n        key 0.08000 -0.00000 -0.00000 0.00000\n        key 0.12000 0.00000 0.00000 -0.00000\n        key 0.16000 0.00000 0.00000 -0.00000\n        key 0.20000 -0.00000 0.00000 0.00000\n        key 0.24000 -0.00000 0.00000 0.00000\n        key 0.28000 0.00000 0.00000 -0.00000\n        key 0.32000 0.00000 0.00000 -0.00000\n        key 0.36000 0.00000 0.00000 -0.00000\n        key 0.40000 0.00000 0.00000 -0.00000\n        key 0.44000 0.00000 0.00000 -0.00000\n        key 0.48000 0.00000 0.00000 -0.00000\n        key 0.52000 0.00000 0.00000 -0.00000\n        key 0.56000 0.00000 0.00000 -0.00000\n        key 0.60000 0.00000 0.00000 -0.00000\n        key 0.64000 0.00000 0.00000 -0.00000\n        key 0.68000 0.00000 0.00000 -0.00000\n        key 0.72000 0.00000 0.00000 -0.00000\n        key 0.76000 0.00000 0.00000 -0.00000\n      }\n    }\n    Channel {\n      name "quaternion"\n      target "Bone"\n      Keyframes "Quat" 20 {\n        key 0.00000 0.00000 0.00000 0.00000 1.00000\n        key 0.04000 0.00000 0.00000 0.00000 1.00000\n        key 0.08000 0.00000 0.00000 0.00000 1.00000\n        key 0.12000 0.00000 0.00000 0.00000 1.00000\n        key 0.16000 0.00000 0.00000 0.00000 1.00000\n        key 0.20000 0.00000 0.00000 0.00000 1.00000\n        key 0.24000 0.00000 0.00000 0.00000 1.00000\n        key 0.28000 0.00000 0.00000 0.00000 1.00000\n        key 0.32000 0.00000 0.00000 0.00000 1.00000\n        key 0.36000 0.00000 0.00000 0.00000 1.00000\n        key 0.40000 0.00000 0.00000 0.00000 1.00000\n        key 0.44000 0.00000 0.00000 0.00000 1.00000\n        key 0.48000 0.00000 0.00000 0.00000 1.00000\n        key 0.52000 0.00000 0.00000 0.00000 1.00000\n        key 0.56000 0.00000 0.00000 0.00000 1.00000\n        key 0.60000 0.00000 0.00000 0.00000 1.00000\n        key 0.64000 0.00000 0.00000 0.00000 1.00000\n        key 0.68000 0.00000 0.00000 0.00000 1.00000\n        key 0.72000 0.00000 0.00000 0.00000 1.00000\n        key 0.76000 0.00000 0.00000 0.00000 1.00000\n      }\n    }\n    Channel {\n      name "scale"\n      target "Bone"\n      Keyframes "Vec3" 20 {\n        key 0.00000 1.00000 1.00000 0.00000\n        key 0.04000 1.00000 1.00000 0.00000\n        key 0.08000 1.00000 1.00000 0.00000\n        key 0.12000 1.00000 1.00000 0.00000\n        key 0.16000 1.00000 1.00000 0.00000\n        key 0.20000 1.00000 1.00000 0.00000\n        key 0.24000 1.00000 1.00000 0.00000\n        key 0.28000 1.00000 1.00000 0.00000\n        key 0.32000 1.00000 1.00000 0.00000\n        key 0.36000 1.00000 1.00000 0.00000\n        key 0.40000 1.00000 1.00000 0.00000\n        key 0.44000 1.00000 1.00000 0.00000\n        key 0.48000 1.00000 1.00000 0.00000\n        key 0.52000 1.00000 1.00000 0.00000\n        key 0.56000 1.00000 1.00000 0.00000\n        key 0.60000 1.00000 1.00000 0.00000\n        key 0.64000 1.00000 1.00000 0.00000\n        key 0.68000 1.00000 1.00000 0.00000\n        key 0.72000 1.00000 1.00000 0.00000\n        key 0.76000 1.00000 1.00000 0.00000\n      }\n    }\n    Channel {\n      name "position"\n      target "Bone"\n      Keyframes "Vec3" 20 {\n        key 0.00000 -0.00000 0.00000 0.00000\n        key 0.04000 -0.00000 0.00000 0.00000\n        key 0.08000 -0.00000 0.00000 0.00000\n        key 0.12000 -0.00000 0.00000 0.00000\n        key 0.16000 -0.00000 0.00000 0.00000\n        key 0.20000 -0.00000 0.00000 0.00000\n        key 0.24000 -0.00000 0.00000 0.00000\n        key 0.28000 -0.00000 0.00000 0.00000\n        key 0.32000 -0.00000 0.00000 0.00000\n        key 0.36000 -0.00000 0.00000 0.00000\n        key 0.40000 -0.00000 0.00000 0.00000\n        key 0.44000 -0.00000 0.00000 0.00000\n        key 0.48000 -0.00000 0.00000 0.00000\n        key 0.52000 -0.00000 0.00000 0.00000\n        key 0.56000 -0.00000 0.00000 0.00000\n        key 0.60000 -0.00000 0.00000 0.00000\n        key 0.64000 -0.00000 0.00000 0.00000\n        key 0.68000 -0.00000 0.00000 0.00000\n        key 0.72000 -0.00000 0.00000 0.00000\n        key 0.76000 -0.00000 0.00000 0.00000\n      }\n    }\n  }\n$}\n'
        self.assertEquals(result, text)
        exporter.write()


def Run():
        loader = runner.TestLoader()
        loader.methodPrefix = "test"
        suite = loader.suiteFactory()
        suite.addTest(loader.loadClass(Exporter))
        return runner.TrialRunner(
                reporter.VerboseTextReporter,
                tracebackFormat='default',
                ).run(suite)

if __name__ == '__main__':
        if Run().wasSuccessful():
                sys.exit(0)
        else:
                sys.exit(1)
