# -*- python-indent: 4; coding: iso-8859-1; mode: python -*-
# Copyright (C) 2008-2011 Cedric Pinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#  Cedric Pinson <cedric.pinson@plopbyte.com>
#


import unittest
import math

import sys
sys.path.insert(0, "@PROJECT_SOURCE_DIR@/exporter/")

import bpy
import osg
from osg.osgobject import *
from osg.osgdata import *


def close(a, b, threshold):
    for i in range(0,len(a)):
        if math.fabs(a[i] - b[i]) > threshold:
            return False
    return True


def makeSceneActive(scene):
    import ctypes
    import bpy

    blend_cdll = ctypes.CDLL("")

    bmain = ctypes.POINTER(ctypes.c_void_p).from_address(ctypes.addressof(blend_cdll.G)).contents.value
    
    sce = bpy.data.scenes[scene]
    ctr = blend_cdll.BPy_GetContext()

    blend_cdll.ED_screen_set_scene(ctr, sce.as_pointer())
    print(bpy.context.scene)

class Exporter(unittest.TestCase):
    # ------------------------------------------------------
    def setUp(self):
        osg.osgobject.Object.resetWriter()

    def tearDown(self):
        self.removeFile("./textures/One.png")
        self.removeFile("./textures/Two.png")
        self.removeFile("./textures/bbb.png")
        self.removeFile("./textures/sol_trauma_periph.png")

    def removeFile(self, name):
        try:
            os.remove(name)
        except:
            pass

    def checkFile(self, name):
        return os.path.isfile(name)
                
    def testBlenderObjectToGeometry(self):
        geomquad = BlenderObjectToGeometry(object = bpy.data.objects["CubeQuads"])
        geom = geomquad.convert()[0]
        self.assertEquals(False, len(geom.stateset.texture_attributes) > 0)

        self.assertEquals("CubeQuads", geom.name)
        self.assertEquals(True, geom.vertexes != None)
        self.assertEquals(24, len(geom.vertexes.array))
        self.assertEquals(True, geom.normals != None)
        self.assertEquals(24, len(geom.normals.array))
        self.assertEquals(1, len(geom.primitives))
        self.assertEquals("QUADS", geom.primitives[0].type)
        self.assertEquals(24, len(geom.primitives[0].indexes))


        geomtriangle = BlenderObjectToGeometry(object = bpy.data.objects["CubeTriangle"])
        geom = geomtriangle.convert()[0]
        print(geom)
        self.assertEquals(True, geom.vertexes != None)
        self.assertEquals(24, len(geom.vertexes.array))
        self.assertEquals(True, geom.normals != None)
        self.assertEquals(24, len(geom.normals.array))
        self.assertEquals(1, len(geom.primitives))
        self.assertEquals("TRIANGLES", geom.primitives[0].type)
        self.assertEquals(36, len(geom.primitives[0].indexes))


        geomtriangle = BlenderObjectToGeometry(object = bpy.data.objects["CubeTriangleSmooth"])
        geom = geomtriangle.convert()[0]
        print( geom)
        self.assertEquals(True, geom.vertexes != None)
        self.assertEquals(8, len(geom.vertexes.array))
        self.assertEquals(True, geom.normals != None)
        self.assertEquals(8, len(geom.normals.array))
        self.assertEquals(1, len(geom.primitives))
        self.assertEquals("TRIANGLES", geom.primitives[0].type)
        self.assertEquals(36, len(geom.primitives[0].indexes))


        geomtriangle = BlenderObjectToGeometry(object = bpy.data.objects["CubeTriangleTextured"])
        geom = geomtriangle.convert()[0]
        print( geom)
        self.assertEquals(True, geom.vertexes != None)
        self.assertEquals(20, len(geom.vertexes.array))
        self.assertEquals(True, geom.uvs != None)
        print(geom.uvs.keys())
        self.assertEquals(20, len(geom.uvs[0].array))
        self.assertEquals(True, geom.normals != None)
        self.assertEquals(20, len(geom.normals.array))
        self.assertEquals(True, geom.stateset != None)
        print(geom.stateset.texture_attributes)
        self.assertEquals(1, len(geom.stateset.texture_attributes[0]))
        self.assertEquals("textures/bbb.png", geom.stateset.texture_attributes[0][0].file )
        self.assertEquals(1, len(geom.primitives))
        self.assertEquals("TRIANGLES", geom.primitives[0].type)
        self.assertEquals(36, len(geom.primitives[0].indexes))

    def testMultiUVS(self):
        makeSceneActive("MultiUVS")
        exporter = Export()
        exporter.process()
        exporter.write()


    def testGeometry(self):
        makeSceneActive("Geometry")
        exporter = Export()
        exporter.process()
        exporter.write()
        self.assertTrue(self.checkFile("./textures/bbb.png"))
        self.assertTrue(self.checkFile("./textures/Two.png"))
        self.assertTrue(self.checkFile("./textures/sol_trauma_periph.png"))

    def testBlenderMaterial(self):
        geomquad = BlenderObjectToGeometry(object = bpy.data.objects["CubeMaterial"])
        geom_list = geomquad.convert()
        geom = geom_list[0]
        self.assertEquals((0.0,0.0,0.0,1.0),geom.stateset.attributes[0].emission)
        self.assertEquals(True, close((0.64,0.64,0.64,1.0),geom.stateset.attributes[0].diffuse, 0.01) )
        self.assertEquals(True, close((0.64,0.64,0.64,1.0),geom.stateset.attributes[0].diffuse, 0.01) )
        self.assertEquals(True, close((0.5,0.5,0.5,1.0),geom.stateset.attributes[0].specular, 0.01) )
        self.assertEquals(12.5 ,geom.stateset.attributes[0].shininess)

    def testExportBlenderMaterial(self):
        makeSceneActive("Materials")
        exporter = Export()
        exporter.config.anim_bake = ""
        exporter.config.export_anim = False
        exporter.config.filename = "materials"
        exporter.process()
        exporter.write()
        self.assertEquals(True, len(exporter.items) != 0)

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(Exporter)
    sys.exit(len(unittest.TextTestRunner(verbosity=2).run(suite).failures))
    #print(unittest.TextTestRunner(verbosity=2).run(suite))
    #sys.exit(len(unittest.TextTestRunner(verbosity=2).run(suite).errors))
